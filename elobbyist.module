<?php

/**
 * @file
 * Main module file for elobbyist
 * 
 * Allows mass lobbying by email through subscribers' own email accounts
 */

define('ELOBBYIST_SUBSCRIBER_TYPE_ONE_TIME', 1);
define('ELOBBYIST_SUBSCRIBER_TYPE_PERSISTENT', 2);

define('ELOBBYIST_DEFAULT_SMTP_PORT','465');
define('ELOBBYIST_DEFAULT_RECORDS_PER_PAGE',25);
define('ELOBBYIST_DEFAULT_MAIN_MENU_WEIGHT', 500);
define('ELOBBYIST_DEFAULT_NOTIFY_ON_EMAILS_SENT_FOR_ADMIN_FORM', 0);

define('ELOBBYIST_FORM_ADMIN', 1);
define('ELOBBYIST_FORM_PUBLIC', 2);

define('ELOBBYIST_TEMPLATE_STATUS_DRAFT', 1);
define('ELOBBYIST_TEMPLATE_STATUS_ACTIVE', 2);
define('ELOBBYIST_TEMPLATE_STATUS_CLOSED', 3);
define('ELOBBYIST_TEMPLATE_STATUS_CANCELLED', 4);

define('ELOBBYIST_MAILING_STATUS_DRAFT', 1);
define('ELOBBYIST_MAILING_STATUS_ACTIVE', 2);
define('ELOBBYIST_MAILING_STATUS_CLOSED', 3);
define('ELOBBYIST_MAILING_STATUS_CANCELLED', 4);

define('ELOBBYIST_MAILING_SCHEDULE_MAX_DAYS', 30);
define('ELOBBYIST_MAILING_SCHEDULE_MAX_YEARS', 10);

define('ELOBBYIST_MAILING_SCHEDULE_ONE_TIME', 1);
define('ELOBBYIST_MAILING_SCHEDULE_ON_GOING', 2);

define('ELOBBYIST_DATE_FULL_FORMAT', 'Y-m-d H:i');

define('ELOBBYIST_GROUP_STATUS_ACTIVE', 1);
define('ELOBBYIST_GROUP_STATUS_INACTIVE', 2);

/**
 * Implement hook_help().
 */
function elobbyist_help($path, $args) {
  if ($path == 'admin/help#elobbyist') {
    return t('Mass lobby by email through subscribers\' own email providers');
  }
}

/**
 * Implements hook_entity_info().
 */
function elobbyist_entity_info() {
  $return = array(
    'elobbyist_contact' => array(
      'label' => t('Email Lobbyist Contact'),
      'controller class' => 'ELobbyistContactController',
      'base table' => 'elobbyist_contact',
      'uri callback' => 'elobbyist_contact_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'cid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(), //set later
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  $return['elobbyist_group'] = array(
    'label' => t('Email Lobbyist Contact Group'),
    'controller class' => 'ELobbyistContactGroupController',
    'base table' => 'elobbyist_group',
    'uri callback' => 'elobbyist_group_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'grpid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
        'bundle' => 'type',
      ),
    'bundles' => array(), //set later
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_mailing'] = array(
    'label' => t('Email Lobbyist Mailing'),
    'controller class' => 'ELobbyistMailingController',
    'base table' => 'elobbyist_mailing',
    'uri callback' => 'elobbyist_mailing_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_activity'] = array(
    'label' => t('Email Lobbyist Activity'),
    'controller class' => 'ELobbyistActivityController',
    'base table' => 'elobbyist_activity',
    'uri callback' => 'elobbyist_activity_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
    ),
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_template'] = array(
    'label' => t('Email Lobbyist Template'),
    'controller class' => 'ELobbyistTemplateController',
    'base table' => 'elobbyist_template',
    'uri callback' => 'elobbyist_template_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'tid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_email_provider'] = array(
    'label' => t('Email Lobbyist Email Provider'),
    'controller class' => 'ELobbyistEmailProviderController',
    'base table' => 'elobbyist_email_provider',
    'uri callback' => 'elobbyist_email_provider_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'providerid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  foreach(elobbyist_contact_types() as $type => $info) {
    $return['elobbyist_contact']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/elobbyist_contacts/manage/%contact_type',
        'real path' => 'admin/structure/elobbyist/contacts/manage/' . 
        str_replace('_', '-', $type), //drupal path format
        'bundle argument' => 4,
        'access arguments' => array('administer email lobbyist contacts'),
      ),
    );
  }
  
  foreach(elobbyist_group_types() as $type => $info) {    
    $return['elobbyist_group']['bundles'][$info->type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/elobbyist_groups/manage/%contact_group_type',
        'real path' => 'admin/structure/elobbyist/contact_groups/manage/' . 
        str_replace('_', '-', $type), //drupal path format
        'bundle argument' => 4,
        'access arguments' => array('administer email lobbyist contact groups'),
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_menu()
 * 
 */
function elobbyist_menu() {
  $items = array();
    
  $items['elobbyist'] = array(
      'title' => 'Email Lobbyist',
      'page callback' => 'elobbyist_main_page',
      'access arguments' => array('coordinate email lobbyist'),
      'menu_name' => 'management',
      'weight' => variable_get('elobbyist_main_menu_weight', ELOBBYIST_DEFAULT_MAIN_MENU_WEIGHT),
    );
  
  $items['admin/config/administration/elobbyist'] = array(
    'title' => 'Email Lobbyist',
    'description' => 'Configuration for Email Lobbyist module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/settings.pages.inc',
  );
  
  $items['admin/config/administration/elobbyist/restore'] = array(
    'title' => 'Restore defaults',
    'description' => 'Restore default configuration settings for Email Lobbyist module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_settings_restore_confirm'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/settings.pages.inc',
  );
  
  //email_provider
  $items['elobbyist/email-providers'] = array(
      'title' => 'Email Providers',
      'page callback' => 'elobbyist_email_provider_grid',
      'access arguments' => array('view email lobbyist email providers'),
      'menu_name' => 'management',
      'weight' => 100,
      'file' => 'includes/email_provider.pages.inc',
    );
  
  $items['elobbyist/email-providers/add'] = array(
      'title' => 'Add new email provider',
      'page callback' => 'elobbyist_email_provider_add',
      'access arguments' => array('create email lobbyist email providers'),
      'weight' => 1,
      'menu_name' => 'management',
      'file' => 'includes/email_provider.pages.inc',
    );
  
  $items['elobbyist/email-provider/%elobbyist_email_provider/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_email_provider_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist email providers'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'file' => 'includes/email_provider.pages.inc',
  );

  $items['elobbyist/email-provider/%elobbyist_email_provider/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_email_provider_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist email providers'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/email_provider.pages.inc',
  );
  
  //contact
  $items['elobbyist/subscribers'] = array(
      'title' => 'Subscribers',
      'page callback' => 'elobbyist_subscribers_grid',
      'access arguments' => array('administer email lobbyist contacts'),
      'menu_name' => 'management',
      'weight' => 1,
      'file' => 'includes/contact.pages.inc',
    );
  
  $items['elobbyist/recipients'] = array(
      'title' => 'Recipients',
      'page callback' => 'elobbyist_recipients_grid',
      'access arguments' => array('administer email lobbyist contacts'),
      'menu_name' => 'management',
      'weight' => 2,
      'file' => 'includes/contact.pages.inc',
    );
  
  $items['elobbyist/subscribers/add/subscriber'] = array(
      'title' => 'Add new subscriber',
      'page callback' => 'elobbyist_contact_add',
      'page arguments' => array(3),
      'access arguments' => array('create email lobbyist contacts'),
      'menu_name' => 'management',
      'file' => 'includes/contact.pages.inc',
    );
  
  $items['elobbyist/recipients/add/recipient'] = array(
      'title' => 'Add new recipient',
      'page callback' => 'elobbyist_contact_add',
      'page arguments' => array(3),
      'access arguments' => array('create email lobbyist contacts'),
      'menu_name' => 'management',
      'file' => 'includes/contact.pages.inc',
    );
  
  $items['elobbyist/contact'] = array(
    'title' => 'Contact',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  $items['elobbyist/contact/%elobbyist_contact/view'] = array(
    'title' => 'View',
    'page callback' => 'elobbyist_contact_page_view',
    'page arguments' => array(2),
    'access arguments' => array('view email lobbyist contacts'),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact.pages.inc',
  );
  
  $items['elobbyist/contact/%elobbyist_contact/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_contact_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist contacts'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact.pages.inc',
  ); 

  $items['elobbyist/contact/%elobbyist_contact/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_contact_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist contacts'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/contact.pages.inc',
  );
  
  //contact group
  $items['elobbyist/subscribers/groups'] = array(
      'title' => 'Groups',
      'page callback' => 'elobbyist_contacts_groups_grid',
      'page arguments' => array(1),
      'access arguments' => array('administer email lobbyist contact groups'),
      'menu_name' => 'management',
      'weight' => 1,
      'file' => 'includes/contact_group.pages.inc',
    );
  
  $items['elobbyist/recipients/groups'] = array(
      'title' => 'Groups',
      'page callback' => 'elobbyist_contacts_groups_grid',
      'page arguments' => array(1),
      'access arguments' => array('administer email lobbyist contact groups'),
      'menu_name' => 'management',
      'weight' => 2,
      'file' => 'includes/contact_group.pages.inc',
    );
  
  $items['elobbyist/subscribers/groups/add'] = array(
      'title' => 'Add new subscribers group',
      'page callback' => 'elobbyist_group_add',
      'page arguments' => array(1),
      'access arguments' => array('create email lobbyist contact groups'),
      'menu_name' => 'management',
      'file' => 'includes/contact_group.pages.inc',
    );
  
  $items['elobbyist/recipients/groups/add'] = array(
      'title' => 'Add new recipients group',
      'page callback' => 'elobbyist_group_add',
      'page arguments' => array(1),
      'access arguments' => array('create email lobbyist contact groups'),
      'menu_name' => 'management',
      'file' => 'includes/contact_group.pages.inc',
    );
  
  $items['elobbyist/contact-group'] = array(
    'title' => 'Contact Group',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['elobbyist/contact-group/%elobbyist_group/view'] = array(
    'title' => 'View',
    'page callback' => 'elobbyist_group_page_view',
    'page arguments' => array(2),
    'access arguments' => array('view email lobbyist contact groups'),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );

  $items['elobbyist/contact-group/%elobbyist_group/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_group_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist contact groups'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );
  
  $items['elobbyist/contact-group/%elobbyist_group/members'] = array(
    'title' => 'Members',
    'page callback' => 'elobbyist_group_contacts_grid',
    'page arguments' => array(2),
    'access arguments' => array('view email lobbyist contact group members'),
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );

  $items['elobbyist/contact-group/%elobbyist_group/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_group_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist contact groups'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );
  
  
  //template
  $items['elobbyist/templates'] = array(
      'title' => 'Email Templates',
      'page callback' => 'elobbyist_template_grid',
      'access arguments' => array('view email lobbyist templates'),
      'menu_name' => 'management',
      'weight' => 70,
      'file' => 'includes/template.pages.inc',
    );
  
  $items['elobbyist/templates/add'] = array(
      'title' => 'Add new email template',
      'page callback' => 'elobbyist_template_add',
      'access arguments' => array('create email lobbyist templates'),
      'weight' => 1,
      'menu_name' => 'management',
      'file' => 'includes/template.pages.inc',
    );
  
  $items['elobbyist/template/%elobbyist_template/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_template_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist templates'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'file' => 'includes/template.pages.inc',
  );

  $items['elobbyist/template/%elobbyist_template/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_template_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist templates'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/template.pages.inc',
  );
  
  //mailing
  $items['elobbyist/mailings'] = array(
      'title' => 'Mailings',
      'page callback' => 'elobbyist_mailing_grid',
      'access arguments' => array('view email lobbyist mailings'),
      'menu_name' => 'management',
      'weight' => 70,
      'file' => 'includes/mailing.pages.inc',
    );

  $items['elobbyist/mailings/add'] = array(
      'title' => 'Add new mailing',
      'page callback' => 'elobbyist_mailing_add',
      'access arguments' => array('create email lobbyist mailings'),
      'weight' => 1,
      'menu_name' => 'management',
      'file' => 'includes/mailing.pages.inc',
    );

   $items['elobbyist/mailing/%elobbyist_mailing/view'] = array(
    'title' => 'View',
    'page callback' => 'elobbyist_mailing_page_view',
    'page arguments' => array(2),
    'access arguments' => array('view email lobbyist mailings'),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/mailing.pages.inc',
  );

  $items['elobbyist/mailing/%elobbyist_mailing/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_mailing_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist mailings'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/mailing.pages.inc',
  );
  
  $items['elobbyist/mailing/%elobbyist_mailing/action'] = array(
    'title' => 'Edit public call to action page',
    'page callback' => 'elobbyist_mailing_action_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist mailings'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/mailing.pages.inc',
  );
  
  $items['elobbyist/mailing/%elobbyist_mailing/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_mailing_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist mailings'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/mailing.pages.inc',
  );
  
  $items['elobbyist/%elobbyist_mailing'] = array(
    'title' => 'Public call to action',
    'page callback' => 'elobbyist_mailing_action_page',
    'page arguments' => array(1),
    'access arguments' => array('view email lobbyist published pages'),
    'weight' => -10,
    'file' => 'includes/mailing.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_forms()
 * 
 */
function elobbyist_forms() {
  $forms = array();
  
  //contact
  $types = elobbyist_contact_types();
  
  foreach($types as $type => $info) {
    $forms[$type . '_elobbyist_contact_form']['callback'] = 'elobbyist_contact_form';
    $forms[$info->group . '_elobbyist_group_form']['callback'] = 'elobbyist_group_form';
  }
  
  $forms['elobbyist_mailing_form']['callback'] = 'elobbyist_mailing_form';
  $forms['elobbyist_activity_form']['callback'] = 'elobbyist_activity_form';
  $forms['elobbyist_template_form']['callback'] = 'elobbyist_template_form';
  $forms['elobbyist_mailing_form']['callback'] = 'elobbyist_mailing_form';
  $forms['elobbyist_email_provider_form']['callback'] = 'elobbyist_email_provider_form';
  
  return $forms;
}

/**
 * Gets contact built in types. Used in hook_entity_info()
 */
function elobbyist_contact_types() {
  //first check cache for data
  $types = &drupal_static(__FUNCTION__);
  
  if (!empty($types)) 
    return $types;

  $types['subscriber'] = (object)array(
    'type' => 'subscriber',
    'name' => t('Subscriber'),
    'group' => 'subscribers',
    'description' => t('Allows to send lobbying emails in hir behalf'),
  );
  $types['recipient'] = (object)array(
    'type' => 'recipient',
    'name' => t('Recipient'),
    'group' => 'recipients',
    'description' => t('A recipient of lobbying emails'),
  );
  
  return $types;
}

function elobbyist_group_types() {
  //first check cache for data
  $types = &drupal_static(__FUNCTION__);
  
  if (!empty($types)) 
    return $types;

  $types['subscribers'] = (object)array(
    'type' => 'subscribers',
    'contact' => 'subscriber',
    'name' => t('Subscribers Group'),
    'plural' => t('Subscribers Groups'),
  );
  $types['recipients'] = (object)array(
    'type' => 'recipients',
    'contact' => 'recipient',
    'name' => t('Recipients Group'),
    'plural' => t('Recipients Groups'),
  );
  
  return $types;
}

/**
 * uri_callback functions
 */
function elobbyist_email_provider_uri($entity) {
  return array(
    'path' => 'elobbyist/email-provider/' . $entity->providerid . '/edit',
  );
}

function elobbyist_contact_uri($contact) {
  return array(
    'path' => 'elobbyist/contact/' . $contact->cid . '/edit',
  );
}

function elobbyist_activity_uri($activity) {
  return array(
    'path' => 'elobbyist/activity/' . $activity->aid . '/edit',
  );
}

function elobbyist_group_uri($contact_group) {
  return array(
    'path' => 'elobbyist/contact-group/' . $contact_group->grpid . '/edit',
  );
}

function elobbyist_mailing_uri($mailing) {
  return array(
    'path' => 'elobbyist/mailing/' . $mailing->mid . '/edit',
  );
}

function elobbyist_template_uri($template) {
  return array(
    'path' => 'elobbyist/template/' . $template->tid . '/edit',
  );
}

/*
 * main page callback
 */
function elobbyist_main_page() {
  $links = array();
  
  $links[] = array(
    'title' => t('Subscribers'),
    'href' => 'elobbyist/subscribers',
    'html' => TRUE,
  );
  
  $links[] = array(
    'title' => t('Add new subscriber'),
    'href' => 'elobbyist/subscribers/add/subscriber',
    'html' => TRUE,
  );


  $links[] = array(
    'title' => t('Subscribers groups'),
    'href' => 'elobbyist/subscribers/groups',
    'html' => TRUE,
  );

  $links[] = array(
    'title' => t('Add new subscribers group'),
    'href' => 'elobbyist/subscribers/groups/add',
    'html' => TRUE,
  );

  $links[] = array(
    'title' => t('Recipients'),
    'href' => 'elobbyist/recipients',
    'html' => TRUE,
  );

  $links[] = array(
    'title' => t('Add new recipient'),
    'href' => 'elobbyist/recipients/add/recipient',
    'html' => TRUE,
  );

  $links[] = array(
    'title' => t('Recipients'),
    'href' => 'elobbyist/recipients/groups',
    'html' => TRUE,
  );

  $links[] = array(
    'title' => t('Add new recipients group'),
    'href' => 'elobbyist/recipients/groups/add',
    'html' => TRUE,
  );
  
  $links[] = array(
    'title' => t('Mailings'),
    'href' => 'elobbyist/mailings',
    'html' => TRUE,
  );
  
  $links[] = array(
    'title' => t('Templates'),
    'href' => 'elobbyist/templates',
    'html' => TRUE,
  );
  
  $links[] = array(
    'title' => t('Email Providers'),
    'href' => 'elobbyist/email-providers',
    'html' => TRUE,
  );
  
  return theme('links', array('links' => $links));
}

/**
 * loads controllers
 */
function elobbyist_contact_load($cid = NULL, $reset = FALSE) {
  $cids = (isset($cid) ? array($cid) : array());
  $entity = elobbyist_contact_load_multiple($cids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_contact_load_multiple($cids = array(), $conditions = array(), 
  $reset = FALSE) {
  
  //invoke hook_elobbyist_contact_load to allow a different data source  
  //example of how the module could be extended to use CRM modules
  /*$entities = module_invoke_all('elobbyist_contact_load', $cids, $conditions);
  
  if ($entities)
    return $entities;*/
  
  return entity_load('elobbyist_contact', $cids, $conditions, $reset);
}

function elobbyist_group_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_group_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_group_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  
  //invoke hook_elobbyist_contact_load to allow a different data source  
  //example of how the module could be extended to use CRM modules
  /*$entities = module_invoke_all('elobbyist_group_load', $ids, $conditions);
  
  if ($entities)
    return $entities;*/
  
  return entity_load('elobbyist_group', $ids, $conditions, $reset);
}

function elobbyist_email_provider_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_email_provider_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_email_provider_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_email_provider', $ids, $conditions, $reset);
}


function elobbyist_activity_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_activity_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_activity_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_activity', $ids, $conditions, $reset);
}

function elobbyist_mailing_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_mailing_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_mailing_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_mailing', $ids, $conditions, $reset);
}

function elobbyist_template_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_template_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_template_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_template', $ids, $conditions, $reset);
}

function elobbyist_contact_delete($cid) {
  elobbyist_contact_delete_multiple(array($cid));
}

function elobbyist_contact_delete_multiple($cids) {
 return entity_get_controller('elobbyist_contact')->delete($cids);
}
function elobbyist_email_provider_delete($id) {
  elobbyist_email_provider_delete_multiple(array($id));
}

function elobbyist_email_provider_delete_multiple($ids) {
  return entity_get_controller('elobbyist_email_provider')->delete($ids);
}

function elobbyist_template_delete($id) {
  elobbyist_template_delete_multiple(array($id));
}

function elobbyist_template_delete_multiple($ids) {
  return entity_get_controller('elobbyist_template')->delete($ids);
}

function elobbyist_mailing_delete($id) {
  elobbyist_mailing_delete_multiple(array($id));
}

function elobbyist_mailing_delete_multiple($ids) {
  return entity_get_controller('elobbyist_mailing')->delete($ids);
}

function elobbyist_group_delete($grpid) {
  elobbyist_group_delete_multiple(array($grpid));
}

function elobbyist_group_delete_multiple($ids) {
  return entity_get_controller('elobbyist_group')->delete($ids);
}

/*
 * Implements hook_theme
 */
function elobbyist_theme($existing, $type, $theme, $path) {
  if($type == 'module') {
    return array(
      'elobbyist_field' => array(
        'variables' => array('title' => NULL,
                             'item' => NULL, 
        ),
      ),
    );
  }
  
  return array();
}

function theme_elobbyist_field($variables) {
  $item = $variables['item'];
  $title = $variables['title'];
  
  $output = '<div class="form-item">';
  
  if (isset($title) && $title !== '') {
    $output .= '<label class="elobbyist-field-label">' . $title . '</label>';
  }

  if (!empty($item)) {
    $output .= "<span>" . $item . "</span>" ;
  } 
   
  $output .= "</div>";
  
  return $output;
}

/*
 * Implements hook_element_info
 */
function elobbyist_element_info() {
 return array(
   'elobbyist_contact_groups' => array(
     '#input' => TRUE,
     '#process' => array('elobbyist_contact_groups_element_process'),
     '#theme_wrappers' => array('form_element'),
   ),
   'elobbyist_from' => array(
     '#input' => TRUE,
     '#process' => array('elobbyist_mail_party_element_process'),
     '#theme_wrappers' => array('form_element'),
   ),
   'elobbyist_to' => array(
     '#input' => TRUE,
     '#process' => array('elobbyist_mail_party_element_process'),
     '#theme_wrappers' => array('form_element'),
   ),
 );
}

function elobbyist_mail_party_element_process($element, $form_state, $complete_form) {
  if (isset($form_state['elobbyist_mailing'])) {
    $entity = $form_state['elobbyist_mailing'];
    
    $group_type = '';
  
    if ($element['#type'] == 'elobbyist_from') {
      $group_type = 'subscribers';
    }
    elseif ($element['#type'] == 'elobbyist_to') {
      $group_type = 'recipients';
    }
    else {
      return array();
    }
    
    //get relevant contact groups as associative array of key-value
    $groups = elobbyist_get_groups($group_type);

    $relations = array();
    //get selected groups through relation api
    if (count($groups) > 0 && !empty($entity->mid)) {
      $relations = elobbyist_relations_get_data('elobbyist_mailing', $entity->mid);
    }
    
    if (elobbyist_groups_process_element($element, $element['#type'],
      'elobbyist_mailing', $group_type, $groups, $relations)) {
      return $element;
    }
  }
  return array();
}

function elobbyist_contact_groups_element_process($element, $form_state, $complete_form) {
    
  if (isset($form_state['elobbyist_contact'])) {
    $entity = $form_state['elobbyist_contact'];
    
    $types = elobbyist_contact_types();

    $grp_type = $types[$entity->type]->group;
    
    //get relevant contact groups as associative array of key-value
    $groups = elobbyist_get_groups($grp_type);

    $relations = array();
    //get selected groups through relation api
    if (count($groups) > 0 && !empty($entity->cid)) {
      $relations = elobbyist_relations_get_data('elobbyist_contact', $entity->cid);
    }
  
    if (elobbyist_groups_process_element($element, 'elobbyist_contact_groups',
      'elobbyist_contact', $grp_type, $groups, $relations)) {
      return $element;
    }
  }
  return array();
}

function elobbyist_groups_process_element(&$element, $element_type, $entity_type, $grp_type, &$groups, &$relations) {
  
  if ($element['#type'] != $element_type)
    return FALSE;
  
  //if there are groups to show
  if (count($groups) > 0) {
    $defaults = array();
    $inactive = array();

    if (count($relations) > 0) {
      foreach($relations as $relation) {
        if ($relation->relation_type != $element['#relation_type']) {
          continue;
        }
        foreach($relation->endpoints as $endpoints) {
          foreach($endpoints as $endpoint) {
            //add each group endpoint
            if ($endpoint['entity_type'] == 'elobbyist_group') {
              $defaults[] = $endpoint['entity_id'];
              //collect inactive groups that are selected - to load them too, and add to list
              if (!isset($groups[$endpoint['entity_id']])) {
                $inactive[] = $endpoint['entity_id'];
              }
            }
          }
        }
      }
    }
  
    $grouplinks = array();

    //change groups to links
    foreach($groups as $grpid => $grpname) {
      $grouplinks[$grpid] = l($grpname, 'elobbyist/contact-group/' . $grpid . '/edit');
    }
    
    //show selected inactive groups, otherwise relations will be deleted in submits
    if (count($inactive) > 0) {
      $iagroups = entity_load('elobbyist_group', $inactive);
      foreach($iagroups as $grpid => $group) {
        if ($group->status == ELOBBYIST_GROUP_STATUS_INACTIVE) {
          $grouplinks[$grpid] = l(t('@grpname (Inactive)', array('@grpname' => $group->name)), 
            'elobbyist/contact-group/' . $grpid . '/edit');
        }
      }
    }

    $element[$entity_type . '_' . $element_type . '_select'] = array(
      '#type' => 'checkboxes',
      '#options' => $grouplinks,
      '#default_value' => $defaults,
    );
  }
  else
  {
    $element['elobbyist_contact_groups_lbl'] = array(
      '#markup' => '<div>' . t('Groups were not created yet.') . '</div>',
    );
  }
  
  return TRUE;
}

/*
 * Submits attached fields
 */
function elobbyist_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  $fields = array();
  $fields_filter = array();
  $entity_id = '';
  $relations = array();
  if (isset($form_state['field'])) { 
    
    //get the attached submitted fields
    if (is_array($form_state['field'])) {
      $fields = array_keys($form_state['field']);
    }
    else {
      $fields[] = key($form_state['field']);
    }

    //filter the submitted fields to the ones this module handles
    if ($entity_type == 'elobbyist_contact') {  
      $entity_id = $entity->cid;
      $fields_filter = array_intersect($fields, array('elobbyist_contact_groups'));
    }
    elseif ($entity_type == 'elobbyist_mailing') {  
      $entity_id = $entity->mid;
      $fields_filter = array_intersect($fields, array('elobbyist_from', 'elobbyist_to'));
    }
    
    //get relations once from the db, for the given entity id
    $relations = elobbyist_relations_get_data($entity_type, $entity_id);
    
    //run relations to group submits
    if (!empty($entity_id) && count($fields_filter) > 0) {
      foreach($fields_filter as $field) {
        elobbyist_groups_attach_submit($field, $entity_id, $entity_type, $entity, $form, $form_state, $relations);
      }
    }
  }
}

function elobbyist_groups_attach_submit($field, $entity_id, $entity_type, &$entity, &$form, &$form_state, &$relations) {
  //exit if no relation_type element
  if (!isset($form[$field]['#relation_type'])) {
    return;
  }

  $childelm = $entity_type . '_' . $field . '_select';

  //save relations
  $newvalues = array();
  if (isset($form_state['input'][$childelm])) {
    $newvalues = $form_state['input'][$childelm];
  }

  $existing_relations = elobbyist_relations_get_keys($relations,
    'elobbyist_group', $form[$field]['#relation_type']);

  foreach($newvalues as $key => $value)
  {
    if ($value) {

      if (isset($existing_relations[$key])) {
        //relation already exists - remove from array so we'll be left only with the ones to delete
        unset($existing_relations[$key]);
      }
      else
      {
        //relation does not exist. create it
        elobbyist_relations_create($entity_type, $entity_id, 'elobbyist_group', $key,
          $form[$field]['#relation_type']);
      }
    }
  }

  //delete the relations we are left with
  foreach($existing_relations as $rid) {
    relation_delete($rid);
  }  
}

/*
 * Check if a relations field has value
 */
function elobbyist_groups_field_has_value($field, $entity_type, &$form, &$form_state) {
  //exit if no relation_type element
  if (!isset($form[$field]['#relation_type'])) {
    return FALSE;
  }

  $childelm = $entity_type . '_' . $field . '_select';

  //save relations
  if (isset($form_state['input'][$childelm])) {
    $newvalues = $form_state['input'][$childelm];
    return (!elobbyist_null_values_or_empty_array($newvalues));
  }
  
  return FALSE;
}

/*
 * Queries the groups table
 */
function elobbyist_get_groups($type) {
  $header = array( array('data' => t('Group Name'), 'field' => 'name', 'sort' => 'asc')	);
  $query = db_select('elobbyist_group', 'cg');
  
	$query = $query->condition('type', $type)
        ->condition('status', ELOBBYIST_GROUP_STATUS_ACTIVE)
				->extend('TableSort')		//Sorting Extender
					->orderByHeader($header);//Field to sort on is picked from $header
  
  $query = $query->fields ('cg', array (
                'grpid',
                'name',
              )
          );
  	
	return $query->execute()->fetchAllKeyed();
}

/*
 * Queries the relation entity
 * 
 */
function elobbyist_relations_get_data($entity_type, $record_id) {
  return entity_load('relation', array_keys(relation_query($entity_type, $record_id)->execute()));
}

/*
 * Create a relation in one line
 */
function elobbyist_relations_create($entity1_type, $entity1_id, $entity2_type, $entity2_id, $relation_type) {
  $endpoints = array();
  $endpoints[0]['entity_id'] = $entity1_id;
  $endpoints[0]['entity_type'] = $entity1_type;
  $endpoints[1]['entity_id'] = $entity2_id;
  $endpoints[1]['entity_type'] = $entity2_type;
  $relation = relation_create($relation_type, $endpoints);
  return relation_save($relation);
}

/*
 * Gets relations target endpoint ids, simplifies structure to entity_id => rid array
 * does not support multiple $target_entity endpoints per relation
 */
function elobbyist_relations_get_keys($relations, $target_entity, $relation_type) {
  $rels = array();
  
  foreach($relations as $rid => $relation) {    
    if ($relation->relation_type != $relation_type) {
      continue;
    }
    
    foreach($relation->endpoints as $endpoints) {
      foreach($endpoints as $endpoint) {
        //add each group endpoint
        if ($endpoint['entity_type'] == $target_entity) {
          $rels[$endpoint['entity_id']] = $rid;
        }
      }
    }
  }
  
  return $rels;
}

/*
 * manual "foreign keys" cascade unset - should be called inside the controller's transaction
 * 
 * Returns number of records updated
 */
function elobbyist_foreign_key_cascade_unset($foreign_table, $foreign_key, $ids) {
  return db_update($foreign_table)->fields(array(
    $foreign_key => NULL,
  ))
  ->condition($foreign_key, $ids, 'IN')
  ->execute();
}

/*
 * manual "foreign keys" cascade delete - should be called inside the controller's transaction
 * 
 */
function elobbyist_foreign_key_cascade_delete($foreign_table, $foreign_key, $primary_key, $ids) {
  $function_name = $foreign_table . '_delete_multiple';
  //try to avoid using db_delete to allow relations to be removed as well
  if (function_exists($function_name)) {
    $query = db_select($foreign_table, 'ft')
      ->fields('ft', array($primary_key))
      ->condition($foreign_key, $ids, 'IN')
      ->execute();
    $keys = $query->fetchCol();

    $function_name($keys);
  }
  else
  {
    db_delete($foreign_table)
      ->condition($foreign_key, $ids, 'IN')
      ->execute();
  }
}

/*
 * Check foreign key - used when the desired action is to block a delete, for undermining integrity
 */
function elobbyist_foreign_key_count($foreign_table, $foreign_key, $ids) {
  $query = db_select($foreign_table, 'ft');
  
  $query->addExpression("COUNT($foreign_key)", 'key_count');
  
  $query = $query->condition($foreign_key, $ids, 'IN')
    ->execute();
  
  return $query->fetchColumn();
}

/*
 * Returns date timestamp from a string in full date format
 * 
 * Example obtained from http://stackoverflow.com/questions/2222851/convert-string-to-date-in-php
 */
function elobbyist_string_to_full_date($datestr) {
  $dateInfo = date_parse_from_format(ELOBBYIST_DATE_FULL_FORMAT, $datestr);
    
  return mktime(
      $dateInfo['hour'], $dateInfo['minute'], $dateInfo['second'],
      $dateInfo['month'], $dateInfo['day'], $dateInfo['year']
  );
}

function elobbyist_null_values_or_empty_array(&$arr) {
  if (!is_array($arr))
    return TRUE;
  
  if (count($arr) == 0)
    return TRUE;
  
  foreach($arr as $val) {
    if (isset($val)) {
      return FALSE;
    }
  }
  
  return TRUE;
}

/*
 * Implements hook_watchdog
 * 
 * Just for debug purposes
 */
function elobbyist_watchdog($log_entry) {
  
  //make sure the error relates to this module
  if (stripos($log_entry['request_uri'], 'elobbyist') === FALSE)
    return;
  
  if (stripos($log_entry['referer'], 'elobbyist') === FALSE)
    return;

  //display all watchdog errors on screen
  if (count($log_entry['variables']) > 0) {
    drupal_set_message(t($log_entry['message'], $log_entry['variables']));
  }
  else {
    drupal_set_message($log_entry['message']);
  }
}