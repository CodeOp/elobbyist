<?php

/**
 * @file
 * Main module file for elobbyist
 * 
 * Allows mass lobbying by email through subscribers' own email accounts
 */

define('ELOBBYIST_SUBSCRIBER_TYPE_ONE_TIME', 1);
define('ELOBBYIST_SUBSCRIBER_TYPE_PERSISTENT', 2);

define('ELOBBYIST_DEFAULT_SMTP_PORT','465');

define('ELOBBYIST_FORM_ADMIN', 1);
define('ELOBBYIST_FORM_PUBLIC', 2);

/**
 * Implement hook_help().
 */
function elobbyist_help($path, $args) {
  if ($path == 'admin/help#elobbyist') {
    return t('Mass lobby by email through subscribers\' own email providers');
  }
}

/**
 * Implements hook_entity_info().
 */
function elobbyist_entity_info() {
  $return = array(
    'elobbyist_contact' => array(
      'label' => t('Email Lobbyist Contact'),
      'controller class' => 'ELobbyistContactController',
      'base table' => 'elobbyist_contact',
      'uri callback' => 'elobbyist_contact_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'cid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(), //set later
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  $return['elobbyist_contact_group'] = array(
    'label' => t('Email Lobbyist Contact Group'),
    'controller class' => 'ELobbyistContactGroupController',
    'base table' => 'elobbyist_contact_group',
    'uri callback' => 'elobbyist_contact_group_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'grpid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
        'bundle' => 'type',
      ),
    'bundles' => array(), //set later
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_mailing'] = array(
    'label' => t('Email Lobbyist Mailing'),
    'controller class' => 'ELobbyistMailingController',
    'base table' => 'elobbyist_mailing',
    'uri callback' => 'elobbyist_mailing_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_activity'] = array(
    'label' => t('Email Lobbyist Activity'),
    'controller class' => 'ELobbyistActivityController',
    'base table' => 'elobbyist_activity',
    'uri callback' => 'elobbyist_activity_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
    ),
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_template'] = array(
    'label' => t('Email Lobbyist Template'),
    'controller class' => 'ELobbyistTemplateController',
    'base table' => 'elobbyist_template',
    'uri callback' => 'elobbyist_template_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'tid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  $return['elobbyist_email_provider'] = array(
    'label' => t('Email Lobbyist Email Provider'),
    'controller class' => 'ELobbyistEmailProviderController',
    'base table' => 'elobbyist_email_provider',
    'uri callback' => 'elobbyist_email_provider_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'providerid',
    ),
    'static cache' => TRUE,
    'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
  );
  
  foreach(elobbyist_contact_types() as $type => $info) {
    $return['elobbyist_contact']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/elobbyist_contacts/manage/%contact_type',
        'real path' => 'admin/structure/elobbyist-contacts/manage/' . 
        str_replace('_', '-', $type), //drupal path format
        'bundle argument' => 4,
        'access arguments' => array('administer email lobbyist contacts'),
      ),
    );
  }
  
  foreach(elobbyist_contact_group_types() as $type => $info) {    
    $return['elobbyist_contact_group']['bundles'][$info->type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/elobbyist_contact_groups/manage/%contact_group_type',
        'real path' => 'admin/structure/elobbyist-contact_groups/manage/' . 
        str_replace('_', '-', $type), //drupal path format
        'bundle argument' => 4,
        'access arguments' => array('administer email lobbyist contact groups'),
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_menu()
 * 
 */
function elobbyist_menu() {
  $items = array();
  
  //allow other modules to alter what menus are displayed from a candidate list
  $menu_custom_list = array();
  elobbyist_get_enabled_menu_options($menu_custom_list);
  
  $items['elobbyist'] = array(
      'title' => 'Email Lobbyist',
      'page callback' => 'elobbyist_main_page',
      'access arguments' => array('coordinate email lobbyist'),
      'menu_name' => 'management',
      'weight' => 500,
    );
  
  //email_provider
  $items['elobbyist/email-providers'] = array(
      'title' => 'Email Providers',
      'page callback' => 'elobbyist_email_provider_grid',
      'access arguments' => array('view email lobbyist email providers'),
      'menu_name' => 'management',
      'weight' => 100,
      'file' => 'includes/email_provider.pages.inc',
    );
  
  $items['elobbyist/email-providers/add'] = array(
      'title' => 'Add new email provider',
      'page callback' => 'elobbyist_email_provider_add',
      'access arguments' => array('create email lobbyist email providers'),
      'weight' => 1,
      'menu_name' => 'management',
      'file' => 'includes/email_provider.pages.inc',
    );
  
  $items['elobbyist/email-provider/%elobbyist_email_provider/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_email_provider_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist email providers'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    //'type' => MENU_LOCAL_TASK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/email_provider.pages.inc',
  );

  $items['elobbyist/email-provider/%elobbyist_email_provider/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_email_provider_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist email providers'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/email_provider.pages.inc',
  );
  
  //contact
  if (isset($menu_custom_list['elobbyist/subscribers'])) {
    $items['elobbyist/subscribers'] = array(
        'title' => 'Subscribers',
        'page callback' => 'elobbyist_subscribers_grid',
        'access arguments' => array('administer email lobbyist contacts'),
        'menu_name' => 'management',
        'weight' => 1,
        'file' => 'includes/contact.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients'])) {
    $items['elobbyist/recipients'] = array(
        'title' => 'Recipients',
        'page callback' => 'elobbyist_recipients_grid',
        'access arguments' => array('administer email lobbyist contacts'),
        'menu_name' => 'management',
        'weight' => 2,
        'file' => 'includes/contact.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/subscribers/add'])) {
    $items['elobbyist/subscribers/add/subscriber'] = array(
        'title' => 'Add new subscriber',
        'page callback' => 'elobbyist_contact_add',
        'page arguments' => array(3),
        'access arguments' => array('create email lobbyist contacts'),
        'menu_name' => 'management',
        'file' => 'includes/contact.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/add'])) {
    $items['elobbyist/recipients/add/recipient'] = array(
        'title' => 'Add new recipient',
        'page callback' => 'elobbyist_contact_add',
        'page arguments' => array(3),
        'access arguments' => array('create email lobbyist contacts'),
        'menu_name' => 'management',
        'file' => 'includes/contact.pages.inc',
      );
  }
  
  $items['elobbyist/contact/%elobbyist_contact/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_contact_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist contacts'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact.pages.inc',
  );

  $items['elobbyist/contact/%elobbyist_contact/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_contact_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist contacts'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/contact.pages.inc',
  );
  
  //contact group
  if (isset($menu_custom_list['elobbyist/subscribers/groups'])) {
    $items['elobbyist/subscribers/groups'] = array(
        'title' => 'Groups',
        'page callback' => 'elobbyist_contacts_groups_grid',
        'page arguments' => array(1),
        'access arguments' => array('administer email lobbyist contact groups'),
        'menu_name' => 'management',
        'weight' => 1,
        'file' => 'includes/contact_group.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/groups'])) {
    $items['elobbyist/recipients/groups'] = array(
        'title' => 'Groups',
        'page callback' => 'elobbyist_contacts_groups_grid',
        'page arguments' => array(1),
        'access arguments' => array('administer email lobbyist contact groups'),
        'menu_name' => 'management',
        'weight' => 2,
        'file' => 'includes/contact_group.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/subscribers/groups/add'])) {
    $items['elobbyist/subscribers/groups/add'] = array(
        'title' => 'Add new subscribers group',
        'page callback' => 'elobbyist_contact_group_add',
        'page arguments' => array(1),
        'access arguments' => array('create email lobbyist contact groups'),
        'menu_name' => 'management',
        'file' => 'includes/contact_group.pages.inc',
      );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/groups/add'])) {
    $items['elobbyist/recipients/groups/add'] = array(
        'title' => 'Add new recipients group',
        'page callback' => 'elobbyist_contact_group_add',
        'page arguments' => array(1),
        'access arguments' => array('create email lobbyist contact groups'),
        'menu_name' => 'management',
        'file' => 'includes/contact_group.pages.inc',
      );
  }
  
  $items['elobbyist/contact-group/%elobbyist_contact_group/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'elobbyist_contact_group_page_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit email lobbyist contact groups'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );

  $items['elobbyist/contact-group/%elobbyist_contact_group/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elobbyist_contact_group_delete_confirm', 2),
    'access arguments' => array('delete email lobbyist contact groups'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/contact_group.pages.inc',
  );

  return $items;
}

/*
 * Calls invokes hook_elobbyist_menu_alter to get which menu options are enabled from a candidate list
 */
function elobbyist_get_enabled_menu_options(&$menu_custom_list) {
  $menu_custom_list = array(
    'elobbyist/subscribers' => '',
    'elobbyist/recipients' => '',
    'elobbyist/subscribers/add' => '',
    'elobbyist/recipients/add' => '',
    'elobbyist/subscribers/groups' => '',
    'elobbyist/recipients/groups' => '',
    'elobbyist/subscribers/groups/add' => '',
    'elobbyist/recipients/groups/add' => '');
  
  //invokes hook_elobbyist_menu_alter
  //to hide a menu call unset($menu_custom_list['menu'])
  drupal_alter('elobbyist_menu', $menu_custom_list);
}

/**
 * Implements hook_forms()
 * 
 */
function elobbyist_forms() {
  $forms = array();
  
  //contact
  $types = elobbyist_contact_types();
  
  foreach($types as $type => $info) {
    $forms[$type . '_elobbyist_contact_form']['callback'] = 'elobbyist_contact_form';
    $forms[$info->group . '_elobbyist_contact_group_form']['callback'] = 'elobbyist_contact_group_form';
  }
  
  $forms['elobbyist_mailing_form']['callback'] = 'elobbyist_mailing_form';
  $forms['elobbyist_activity_form']['callback'] = 'elobbyist_activity_form';
  $forms['elobbyist_template_form']['callback'] = 'elobbyist_template_form';
  $forms['elobbyist_email_provider_form']['callback'] = 'elobbyist_email_provider_form';
  
  return $forms;
}

/**
 * Gets contact built in types. Used in hook_entity_info()
 */
function elobbyist_contact_types() {
  //first check cache for data
  $types = &drupal_static(__FUNCTION__);
  
  if (!empty($types)) 
    return $types;

  $types['subscriber'] = (object)array(
    'type' => 'subscriber',
    'name' => t('Subscriber'),
    'group' => 'subscribers',
    'groupname' => t('Subscribers Group'),
    'description' => t('Allows to send lobbying emails in hir behalf'),
  );
  $types['recipient'] = (object)array(
    'type' => 'recipient',
    'name' => t('Recipient'),
    'group' => 'recipients',
    'groupname' => t('Recipients Group'),
    'description' => t('A recipient of lobbying emails'),
  );
  
  return $types;
}

function elobbyist_contact_group_types() {
  //first check cache for data
  $types = &drupal_static(__FUNCTION__);
  
  if (!empty($types)) 
    return $types;

  $types['subscribers'] = (object)array(
    'type' => 'subscribers',
    'name' => t('Subscribers Group'),
    'plural' => t('Subscribers Groups'),
  );
  $types['recipients'] = (object)array(
    'type' => 'recipients',
    'name' => t('Recipients Group'),
    'plural' => t('Recipients Groups'),
  );
  
  return $types;
}

/**
 * uri_callback functions
 */
function elobbyist_email_provider_uri($entity) {
  return array(
    'path' => $entity->providerid,
  );
}

function elobbyist_contact_uri($contact) {
  return array(
    'path' => $contact->cid,
  );
}

function elobbyist_activity_uri($activity) {
  return array(
    'path' => $activity->aid,
  );
}

function elobbyist_contact_group_uri($contact_group) {
  return array(
    'path' => $contact_group->grpid,
  );
}

function elobbyist_mailing_uri($mailing) {
  return array(
    'path' => $mailing->mid,
  );
}

function elobbyist_template_uri($template) {
  return array(
    'path' => $template->tid,
  );
}

/*
 * main page callback
 */
function elobbyist_main_page() {
  $links = array();
  
  //allow other modules to alter what menus are displayed from a candidate list
  $menu_custom_list = array();
  elobbyist_get_enabled_menu_options($menu_custom_list);
  
  if (isset($menu_custom_list['elobbyist/subscribers'])) {
    $links[] = array(
      'title' => t('Subscribers'),
      'href' => 'elobbyist/subscribers',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/subscribers/add'])) {
    $links[] = array(
      'title' => t('Add new subscriber'),
      'href' => 'elobbyist/subscribers/add/subscriber',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/subscribers/groups'])) {
    $links[] = array(
      'title' => t('Subscribers groups'),
      'href' => 'elobbyist/subscribers/groups',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/subscribers/groups/add'])) {
    $links[] = array(
      'title' => t('Add new subscribers group'),
      'href' => 'elobbyist/subscribers/groups/add',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients'])) {
    $links[] = array(
      'title' => t('Recipients'),
      'href' => 'elobbyist/recipients',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/add'])) {
    $links[] = array(
      'title' => t('Add new recipient'),
      'href' => 'elobbyist/recipients/add/recipient',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/groups'])) {
    $links[] = array(
      'title' => t('Recipients'),
      'href' => 'elobbyist/recipients/groups',
      'html' => TRUE,
    );
  }
  
  if (isset($menu_custom_list['elobbyist/recipients/groups/add'])) {
    $links[] = array(
      'title' => t('Add new recipients group'),
      'href' => 'elobbyist/recipients/groups/add',
      'html' => TRUE,
    );
  }
  
  $links[] = array(
    'title' => t('Email Providers'),
    'href' => 'elobbyist/email-providers',
    'html' => TRUE,
  );
  
  return theme('links', array('links' => $links));
}

/**
 * loads controllers
 */
function elobbyist_contact_load($cid = NULL, $reset = FALSE) {
  $cids = (isset($cid) ? array($cid) : array());
  $entity = elobbyist_contact_load_multiple($cids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_contact_load_multiple($cids = array(), $conditions = array(), 
  $reset = FALSE) {
  
  //invoke hook_elobbyist_contact_load to allow a different data source  
  $entities = module_invoke_all('elobbyist_contact_load', $cids, $conditions);
  
  if ($entities)
    return $entities;
  
  return entity_load('elobbyist_contact', $cids, $conditions, $reset);
}

function elobbyist_contact_group_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_contact_group_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_contact_group_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  
  //invoke hook_elobbyist_contact_load to allow a different data source  
  $entities = module_invoke_all('elobbyist_contact_group_load', $ids, $conditions);
  
  if ($entities)
    return $entities;
  
  return entity_load('elobbyist_contact_group', $ids, $conditions, $reset);
}

function elobbyist_email_provider_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_email_provider_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_email_provider_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_email_provider', $ids, $conditions, $reset);
}


function elobbyist_activity_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_activity_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_activity_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_activity', $ids, $conditions, $reset);
}

function elobbyist_mailing_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_mailing_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_mailing_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_mailing', $ids, $conditions, $reset);
}

function elobbyist_template_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = elobbyist_template_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

function elobbyist_template_load_multiple($ids = array(), $conditions = array(), 
  $reset = FALSE) {
  return entity_load('elobbyist_template', $ids, $conditions, $reset);
}
